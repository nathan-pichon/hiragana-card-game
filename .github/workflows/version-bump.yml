name: "Bump Version and Create Release"
on:
  pull_request:
    types: [closed]
    branches:
      - main

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

jobs:
  version:
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true
    outputs:
      new_version: ${{ steps.set_version.outputs.new_version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Ensure all tags are fetched
          token: ${{ secrets.GH_PAT }}  # Use a personal access token with appropriate permissions

      - uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: "Set up Git"
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

      - name: "Determine version bump"
        id: semver
        run: |
          LABELS=$(gh pr view ${{ github.event.pull_request.number }} --json labels --jq '.labels[].name')
          VERSION_TYPE="patch" # Default to patch (bugfix)

          if echo "$LABELS" | grep -q "breaking change"; then
            VERSION_TYPE="major"
          elif echo "$LABELS" | grep -q "enhancement"; then
            VERSION_TYPE="minor"
          fi

          echo "VERSION_TYPE=$VERSION_TYPE" >> $GITHUB_ENV
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: "Bump version and update branches"
        id: set_version
        run: |
          # Create a unique branch name for the version bump
          UNIQUE_BRANCH="version-bump-$(date +%s)"
          echo "Created unique branch: $UNIQUE_BRANCH"

          # Create the unique branch
          git checkout -b $UNIQUE_BRANCH
          echo "Checked out to branch: $UNIQUE_BRANCH"

          # Bump version
          npm version $VERSION_TYPE -m "chore(version): version bumped to %s [skip ci]"
          echo "Bumped version to $VERSION_TYPE"

          # Get the new version
          NEW_VERSION=$(node -p "require('./package.json').version")
          echo "New version is $NEW_VERSION"

          # Ensure main is up-to-date
          git checkout main
          echo "Checked out to main branch"
          git pull origin main --rebase
          echo "Rebased main branch with origin/main"

          # Fast-forward merge UNIQUE_BRANCH into main
          git merge --ff-only $UNIQUE_BRANCH
          echo "Fast-forward merged $UNIQUE_BRANCH into main"
          git push origin main
          echo "Pushed main branch to origin"

          # Ensure develop is up-to-date
          git checkout develop
          echo "Checked out to develop branch"
          git pull origin develop --rebase
          echo "Rebased develop branch with origin/develop"

          # Rebase UNIQUE_BRANCH onto develop
          git rebase $UNIQUE_BRANCH
          echo "Rebased $UNIQUE_BRANCH onto develop"

          # Push changes to develop
          git push origin develop --force
          echo "Pushed develop branch to origin"

          # Output the new version for the release job
          echo "new_version=v$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "Output new version: v$NEW_VERSION"
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}  # Use a personal access token with push permissions

  release:
    runs-on: ubuntu-latest
    needs: version  # Ensure this job runs after the version bump job
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Ensure all tags are fetched

      - name: "Set up Git"
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

      - name: "Create New Tag"
        id: create_tag
        run: |
          # Use the new version from the version bump job
          TAG=${{ needs.version.outputs.new_version }}
          echo "Creating tag $TAG"
          git pull
          git tag $TAG
          git push origin $TAG
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}  # Use a personal access token with push permissions

      - name: "Create GitHub Release"
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.version.outputs.new_version }}
          name: ${{ needs.version.outputs.new_version }}  # Title the release with the semver
          generate_release_notes: true  # Enable automatic release notes generation
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}